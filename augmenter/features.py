from feature_processing import FEATURE_PREFIX, FEATURE_NAMES, calc_parameter_stats, create_empty_features


PACKET_FEATURES = tuple(name for name in FEATURE_NAMES if name.startswith('packet'))


def calc_partial_flow_features_from_raw_augmented(packet_vector):
    """ estimates flow features (packet-size derivatives) from the generated by augmenters,
     e.g. 'packet0', ... 'packet$N' """

    client_slice = packet_vector[packet_vector > 0]
    if client_slice.shape[0] > 0:
        client_features = calc_parameter_stats(client_slice,
                                               prefix=FEATURE_PREFIX.client,
                                               feature_name='packet')
    else:
        client_features = create_empty_features(prefix=FEATURE_PREFIX.client, feature_list=PACKET_FEATURES)

    server_slice = packet_vector[packet_vector < 0] * -1
    if server_slice.shape[0] > 0:
        server_features = calc_parameter_stats(server_slice,
                                               prefix=FEATURE_PREFIX.server,
                                               feature_name='packet')
    else:
        server_features = create_empty_features(prefix=FEATURE_PREFIX.server, feature_list=PACKET_FEATURES)

    total_features = dict(**client_features, **server_features)
    return total_features
